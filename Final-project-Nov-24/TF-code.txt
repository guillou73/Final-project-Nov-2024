provider "aws" {
  region = "us-east-1"
}

data "aws_vpc" "default" {
  default = true
}

data "aws_ami" "ubuntu" {
  most_recent = true
  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-22.04-amd64-server-*"]
  }
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
  owners = ["099720109477"]
}

resource "aws_security_group" "k8s_sg" {
  name        = "k8s-sg"
  description = "Security group for Kubernetes cluster"
  vpc_id      = data.aws_vpc.default.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 6443
    to_port     = 6443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 2379
    to_port     = 2380
    protocol    = "tcp"
    self        = true
  }

  ingress {
    from_port   = 10250
    to_port     = 10259
    protocol    = "tcp"
    self        = true
  }

  ingress {
    from_port   = 30000
    to_port     = 32767
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port = 0
    to_port   = 0
    protocol  = "-1"
    self      = true
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "kubernetes-sg"
  }
}

resource "aws_instance" "k8s_master" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = "t2.medium"

  vpc_security_group_ids = [aws_security_group.k8s_sg.id]
  key_name              = var.key_pair_name

  root_block_device {
    volume_size = 20
  }

  tags = {
    Name = "k8s-master"
  }

  user_data = <<-EOF
              #!/bin/bash
              # Update and install required packages
              apt-get update
              apt-get install -y apt-transport-https ca-certificates curl software-properties-common

              # Install containerd
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
              add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              apt-get update
              apt-get install -y containerd.io
              mkdir -p /etc/containerd
              containerd config default > /etc/containerd/config.toml
              systemctl restart containerd

              # Disable swap
              swapoff -a
              sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

              # Load kernel modules
              cat <<EOF2 | tee /etc/modules-load.d/k8s.conf
              overlay
              br_netfilter
              EOF2
              modprobe overlay
              modprobe br_netfilter

              # Set kernel parameters
              cat <<EOF2 | tee /etc/sysctl.d/k8s.conf
              net.bridge.bridge-nf-call-iptables  = 1
              net.bridge.bridge-nf-call-ip6tables = 1
              net.ipv4.ip_forward                 = 1
              EOF2
              sysctl --system

              # Install kubeadm, kubelet, and kubectl
              curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
              echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
              apt-get update
              apt-get install -y kubelet=1.27.0-00 kubeadm=1.27.0-00 kubectl=1.27.0-00
              apt-mark hold kubelet kubeadm kubectl

              # Initialize Kubernetes cluster
              kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=NumCPU > /root/kubeadm-init.log

              # Set up kubeconfig for root user
              mkdir -p /root/.kube
              cp -i /etc/kubernetes/admin.conf /root/.kube/config
              chown $(id -u):$(id -g) /root/.kube/config

              # Install Flannel CNI
              kubectl --kubeconfig=/root/.kube/config apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml

              # Get join command and save it
              kubeadm token create --print-join-command > /root/join-command.sh
              chmod +x /root/join-command.sh

              EOF
}

resource "aws_instance" "k8s_worker" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = "t2.medium"
  depends_on    = [aws_instance.k8s_master]

  vpc_security_group_ids = [aws_security_group.k8s_sg.id]
  key_name              = var.key_pair_name

  root_block_device {
    volume_size = 20
  }

  tags = {
    Name = "k8s-worker"
  }

  user_data = <<-EOF
              #!/bin/bash
              # Update and install required packages
              apt-get update
              apt-get install -y apt-transport-https ca-certificates curl software-properties-common

              # Install containerd
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
              add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              apt-get update
              apt-get install -y containerd.io
              mkdir -p /etc/containerd
              containerd config default > /etc/containerd/config.toml
              systemctl restart containerd

              # Disable swap
              swapoff -a
              sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

              # Load kernel modules
              cat <<EOF2 | tee /etc/modules-load.d/k8s.conf
              overlay
              br_netfilter
              EOF2
              modprobe overlay
              modprobe br_netfilter

              # Set kernel parameters
              cat <<EOF2 | tee /etc/sysctl.d/k8s.conf
              net.bridge.bridge-nf-call-iptables  = 1
              net.bridge.bridge-nf-call-ip6tables = 1
              net.ipv4.ip_forward                 = 1
              EOF2
              sysctl --system

              # Install kubeadm, kubelet, and kubectl
              curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
              echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
              apt-get update
              apt-get install -y kubelet=1.27.0-00 kubeadm=1.27.0-00 kubectl=1.27.0-00
              apt-mark hold kubelet kubeadm kubectl

              # Wait for master to be ready and get join command
              sleep 120
              ssh -o StrictHostKeyChecking=no -i /path/to/your/key.pem ubuntu@${aws_instance.k8s_master.private_ip} 'sudo cat /root/join-command.sh' | bash
              EOF
}

variable "key_pair_name" {
  description = "Name of the SSH key pair to use for the instances"
  type        = string
}

output "master_public_ip" {
  value = aws_instance.k8s_master.public_ip
}

output "worker_public_ip" {
  value = aws_instance.k8s_worker.public_ip
}